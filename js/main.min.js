// user id
const uniqID = "0123456789";

//====================================================
// check localstorage
function checkData(){
    try {
        localStorage.setItem("check", "cheked");
    } catch (e) {
        if (e == e.QUOTA_EXCEEDED_ERR) {
            alert("Limit is exceeded");
        }
    }
}

checkData();
// ================================================================================

class Gallery{
    constructor(){
        this._$gallery = document.querySelector(".gallery");
    }

    get $gallery (){
        return this._$gallery;
    }

    onWheel(event) {
        event.preventDefault();
        this.scrollBy(-event.wheelDelta, 0);
        window.scrollBy(-event.wheelDelta, 0);
    }
}

const galleryObj = new Gallery();

galleryObj.$gallery.addEventListener("mousewheel", galleryObj.onWheel, {passive: false});
class Img {
    constructor(){
        this.id = 0;
        this.imgsrc = "";
        this.likes = [];
        this.dislikes = [];
        this.comments = [];
    }

    addDataClass(){
        const blocks = document.querySelectorAll(".thumb");
        const arrBlocks = [...blocks];
        new Promise(() => {
            let x = 0;
            for (let i = 0; i < arrBlocks.length; i++) {
                const el = arrBlocks[i];
                x++;
                el.setAttribute("data-class", x);
                
                if (x > 8) {
                    x = 0;
                }
            }
        }).then(Img.addThumbType(arrBlocks)); 
    }
    
    static addThumbType(arr) {
        arr.forEach(el =>{
            const attr = el.getAttribute("data-class");
            switch (true) {
            case attr === "1" || attr === "5":
                el.classList.add("thumb_type1");
                break;
            case attr === "2" || attr === "3" || attr === "4" || attr === "7" || attr === "8" || attr === "9":
                el.classList.add("thumb_type2");
                break;
            case attr === "6":
                el.classList.add("thumb_type3");
                break;
            default:
                el.classList.add("thumb_type2");
                break;
            }
        });
    }
}

const imgObj = new Img();
class SearchImg{
    constructor(){
        this.$popup = document.querySelector(".search-img");
        this.$closeEl = document.querySelector(".search-close");
        this.openClass = "search-open";
        this.$search = document.querySelector("#imgText");
        this.$searchBtn = document.querySelector("#searchBtn");
    }

    openSearch(){
        this.$popup.classList.add(this.openClass);
        document.querySelector("body").classList.add("noscroll");
    }

    closePopup(){
        this.$popup.classList.remove(this.openClass);
        document.querySelector("body").classList.remove("noscroll");
    }

    getSearchText(event){
        event.preventDefault;
        let text = this.$search;
        if (text.value.trim() !=="" && text.value.trim().search(/\s\S/) ==-1) {
            let res = text.value.trim();
            let elId;
            fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=1742fab55ce3aa5c9734adcc374aeb5a&text=${res}&sort=relevance&privacy_filter=1&safe_search=1&per_page=1&page=1&format=json&nojsoncallback=1`)
                .then(response => response.json())
                .then(result => {
                    const element = result.photos.photo[0];
                    
                    elId = element.id;
                   
                    imgObj.imgsrc = `https://farm${element.farm}.staticflickr.com/${element.server}/${element.id}_${element.secret}.jpg`,
                    imgObj.id = element.id,
                    localStorage.setItem(imgObj.id, JSON.stringify(imgObj)),
                    this.closePopup(),
                    LoadImg.createImg(elId);

                });
        } 
    }

}

const searchImg = new SearchImg();
searchImg.$closeEl.addEventListener("click", searchImg.closePopup.bind(searchImg));
searchImg.$searchBtn.addEventListener("click", searchImg.getSearchText.bind(searchImg));
searchImg.$search.addEventListener("keypress", function(event){
    if (event.keyCode == 13) {
        searchImg.$searchBtn.click();
    }
});

class LoadImg{
    constructor(wrap){
        this._wrap = wrap;
        this._$formThumb = document.querySelector(".thumb-form");
        this._$formBtn = document.querySelector("#load-img");

    }
    get $formThumb(){
        return this._$formThumb;
    }
    get wrap (){
        return this._wrap;
    }
    get $formBtn(){
        return this._$formBtn;
    }

    getImgFile (event) {
        event.preventDefault;
        searchImg.openSearch();
        
    }

    static createImg(elid) {
        let baseElId = elid;
        new Promise(()=>{
            const base = getDataArray();
            const element = base.find(el => el.id == baseElId);
            const commCount = element.comments.length;
            const disCount = element.dislikes.length;
            const likeCount = element.likes.length;
            loadImg.$formThumb.insertAdjacentHTML("beforebegin",
                `<figure class="thumb" data-id=${element.id}>
                    <img src=${element.imgsrc}  data-id=${element.id} alt="forest">
                    <figcaption class="thumb__info">
                        <div class="info-item info-item_left">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="#a0b0ba" d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 11H7V9h2v2zm4 0h-2V9h2v2zm4 0h-2V9h2v2z"/>
                            <path d="M0 0h24v24H0z" fill="transparent"/></svg>
                            <span class="comments__counter count" data-comments=${element.id}>${commCount}</span>
                        </div>
                        <div class="info-item">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0z"/>
                            <path fill="#a0b0ba" d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
                            <span class="dislike-counter count" data-dislikes=${element.id}>${disCount}</span>
                        </div>
                        <div class="info-item">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0V0z"/>
                            <path fill="#a0b0ba" d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
                            <span class="like_counter count" data-likes=${element.id}>${likeCount}</span>
                        </div>
                    </figcaption>
                </figure>`
            );
        }).then(
            galleryObj.$gallery.insertAdjacentElement("beforeend", loadImg.$formThumb),
            imgObj.addDataClass()
        );
    }

}
const loadImg = new LoadImg(galleryObj.$gallery);

loadImg.$formBtn.addEventListener("click", loadImg.getImgFile);
// ============================================================================

function getDataArray(){
    const arr = [];
    for (let i = 0; i < localStorage.length; i++) {
        let a = localStorage.key(i);
        let obj = localStorage.getItem(a);
        if(Number.isInteger(+a)){
            arr.push(JSON.parse(obj));
        }
    }
    arr.sort(function (a, b) {
        return a.id - b.id;
    });
    return arr;
}
// ===================================================================

function createContent (database){
    let element, commCount, disCount, likeCount;
    
    new Promise(()=>{
        const base = database;
        for (let i = 0; i < base.length; i++) {
            element = base[i];
            commCount = element.comments.length;
            disCount = element.dislikes.length;
            likeCount = element.likes.length;
            loadImg.$formThumb.insertAdjacentHTML("beforebegin",
                `<figure class="thumb"  data-id=${element.id}>
                    <img src=${element.imgsrc} data-id=${element.id} alt="forest">
                    <figcaption class="thumb__info">
                        <div class="info-item info-item_left">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="#a0b0ba" d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 11H7V9h2v2zm4 0h-2V9h2v2zm4 0h-2V9h2v2z"/>
                            <path d="M0 0h24v24H0z" fill="transparent"/></svg>
                            <span class="comments__counter count" data-comments=${element.id}>${commCount}</span>
                        </div>
                        <div class="info-item">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0z"/>
                            <path fill="#a0b0ba" d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
                            <span class="dislike-counter count" data-dislikes=${element.id}>${disCount}</span>
                        </div>
                        <div class="info-item">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0V0z"/>
                            <path fill="#a0b0ba" d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
                            <span class="like_counter count" data-likes=${element.id}>${likeCount}</span>
                        </div>
                    </figcaption>
                </figure>`
            );
        } 
    }).then(
        loadImg.wrap.insertAdjacentElement("beforeend", loadImg.$formThumb),
        imgObj.addDataClass()
    );
    
}
createContent(getDataArray());

// ============================================================

class PopUp {

    static popup = document.querySelector(".popup");
    static popupClose = document.querySelector(".popup-close");
    static setId(targetId){
        this._id = targetId;
    }
    static getId (){
        return this._id;
    }

    constructor(wrap) {
        this.wrap = wrap;
        this._id = null;
    }

    closePopup(){
        PopUp.popupClose.onclick = () =>{
            PopUp.popup.classList.remove("open-popup");
            document.querySelector("body").classList.remove("noscroll");
            PopUp.setId(null);
            document.querySelector(".block-img").remove();
            document.querySelector(".comments").remove();
        };
    }

    openPopup (){
        this.wrap.onclick = function (event) {
            const target = event.target;
            if (target&& target.closest(".thumb")) {
                Promise.all(
                    [PopUp.popup.classList.add("open-popup"),
                        document.querySelector("body").classList.add("noscroll"),
                        PopUp.setId(target.closest(".thumb").getAttribute("data-id")),
                        PopUp.createPopupImg()]
                ).then(
                    
                    Like.setLikeId.apply(PopUp.getId),
                    DisLike.setDislikeId.apply(PopUp.getId),
                    Comments.setCommElements.apply(PopUp.getId),
                    Comments.createComment()
                );
                

            }
        };
    }

    static createPopupImg(){
        const base = getDataArray();
        for (let i = 0; i < base.length; i++) {
            const element = base[i];
            const commCount = element.comments.length;
            const disCount = element.dislikes.length;
            const likeCount = element.likes.length;
            if (element.id == PopUp.getId() && PopUp.getId() != null){
                document.querySelector(".popup__content").insertAdjacentHTML("beforeend",
                    `<figure class="block-img">
                        <img src=${element.imgsrc} alt="forest">
                        <figcaption class="block-img__info">
                            <div class="block-img__info-item dislike ${DisLike.toggleActive(element.dislikes)}" data-dis="">
                                <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0z"/>
                                <path fill="#a0b0ba" d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
                                <span class="dislike_counter count" data-dislikes=${element.id}>${disCount}</span></div>
                            <div class="block-img__info-item like ${Like.toggleActive(element.likes)}" data-like="">
                                <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0V0z"/>
                                <path fill="#a0b0ba" d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
                                <span class="like_counter count" data-likes=${element.id}>${likeCount}</span></div>
                        </figcaption>
                    </figure>
                    <article class="comments">
                        <h2 class="comments__heading">COMMENTS: <span class="comments__counter" data-comments=${element.id}>${commCount}</span></h2>
                        <section class="comments__window">
                            <ul id="messages-list">
                                
                            </ul>
                        </section>
                        <form class="message-form" onsubmit="return false"> 
                            <input id="name" type="text" placeholder="Type your nickname here...">
                            <p class="message-wrap">
                                <textarea id="message" placeholder="Write your comment here..."></textarea>
                                <button id="message-btn" type="button">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24"><path fill="transparent" d="M0 0h24v24H0V0z"/>
                                    <path fill="#ffffff" d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-.4 4.25l-6.54 4.09c-.65.41-1.47.41-2.12 0L4.4 8.25c-.25-.16-.4-.43-.4-.72 0-.67.73-1.07 1.3-.72L12 11l6.7-4.19c.57-.35 1.3.05 1.3.72 0 .29-.15.56-.4.72z"/></svg>
                                </button>
                            </p>
                        </form>
                    </article>` 
                );

                const targetLike = document.querySelector(".like");
                const countLike = document.querySelectorAll("[data-likes]");
                const targetDis = document.querySelector(".dislike");
                const countDis = document.querySelectorAll("[data-dislikes]");

                const targetComm = document.querySelector("#messages-list");
                const countComm = document.querySelectorAll(".comments__counter");

                const callbackLike = (mutations) => {
                    mutations.forEach(mutation => {
                        switch (mutation.type) {
                        case "attributes":
                            for (let i = 0; i < countLike.length; i++) {
                                const count = countLike[i];
                                if(count.getAttribute("data-likes") == PopUp.getId()){
                                    count.textContent = updateLike();
                                }
                            }
                            break;
                        }
                    });
                };

                const callbackDis = (mutations) => {
                    mutations.forEach(mutation => {
                        switch (mutation.type) {
                        case "attributes":
                            for (let i = 0; i < countDis.length; i++) {
                                const count = countDis[i];
                                if(count.getAttribute("data-dislikes") == PopUp.getId()){
                                    count.textContent = updateDis();
                                }
                            }
                            break;
                        }
                    });
                };

                const callbackComm = (mutations) => {
                    mutations.forEach(mutation => {
                        switch (mutation.type) {
                        case "childList":
                            for (let i = 0; i < countComm.length; i++) {
                                const count = countComm[i];
                                if(count.getAttribute("data-comments") === PopUp.getId()){
                                    count.textContent = updateComm();
                                }
                            }
                            break;
                        }
                    });
                };
        
                const observerLike = new MutationObserver(callbackLike);
                const observerDis = new MutationObserver(callbackDis);
                const observerComm = new MutationObserver(callbackComm);

                observerLike.observe(targetLike, {
                    attributes: true,
                    attributeFilter: ["class", "data-like"]
                });

                observerDis.observe(targetDis, {
                    attributes: true,
                    attributeFilter: ["class", "data-like"] 
                });

                observerComm.observe(targetComm, {
                    childList: true
                });

                const updateLike = () => {
                    const base = getDataArray();
                    for (let i = 0; i < base.length; i++) {
                        const element = base[i];
                        const likeCount = element.likes.length;
                        if (element.id == PopUp.getId() && PopUp.getId() != null){
                            return likeCount;
                        }
                    }
                };

                const updateDis = () => {
                    const base = getDataArray();
                    for (let i = 0; i < base.length; i++) {
                        const element = base[i];
                        const dislikeCount = element.dislikes.length;
                        if (element.id == PopUp.getId() && PopUp.getId() != null){
                            return dislikeCount;
                        }
                    }
                };

                const updateComm = () => {
                    const base = getDataArray();
                    for (let i = 0; i < base.length; i++) {
                        const element = base[i];
                        const commentsCount = element.comments.length;
                        if (element.id == PopUp.getId() && PopUp.getId() != null){
                            return commentsCount;
                        }
                    }
                };

            }
            
        } 
        
    }
}

const popup = new PopUp(galleryObj.$gallery);
popup.openPopup();
popup.closePopup();

class Like {

    constructor(){
        this.$like = document.querySelector(".like");
        this.activeClass = "like-active";
    }

    static setLikeId(){
        this.$like = document.querySelector(".like");
        Like.clickLike.apply(this);
    }
      
    static toggleActive(arr){
        const index = arr.findIndex(function(el){
            return el.uniq === uniqID;
        });
        if(index !== -1){
            return "like-active";
        }{
            return "";
        }
    }

    static clickLike(){
        this.$like.onclick = function(event){
            event.preventDefault;
            const btn = this;
            const base = getDataArray();
            for (let i = 0; i < base.length; i++) {
                const element = base[i];

                if(element.id == PopUp.getId()){
    
                    const indexDis = element.dislikes.findIndex(function(el){
                        return el.uniq === uniqID;
                    });
                    const indexLike = element.likes.findIndex(function(el){
                        return el.uniq === uniqID;
                    });

                    if(indexLike === -1 && !btn.classList.contains("like-active" )){
                        btn.classList.add("like-active");
                        btn.setAttribute("data-like", "true");
                        element.likes.push({uniq: uniqID});
                        localStorage.setItem(element.id, JSON.stringify(element));
                        
                        if(indexDis !== -1 && document.querySelector(".dislike").classList.contains("dislike-active")){
                            document.querySelector(".dislike").classList.remove("dislike-active");
                            btn.setAttribute("data-dis", "false");
                            element.dislikes.splice(indexDis, 1);
                            localStorage.setItem(element.id, JSON.stringify(element));
                        }

                    } else {
                        btn.classList.remove("like-active");
                        btn.setAttribute("data-like", "false");
                        element.likes.splice(indexLike, 1);
                        localStorage.setItem(element.id, JSON.stringify(element));}
                    
                } 
               
            }
        };
    }
}

new Like();
class DisLike {

    constructor(){
        this.$dislike = document.querySelector(".dislike");
        this.activeClass = "dislike-active";
    }

    static setDislikeId(){
        this.$dislike = document.querySelector(".dislike");
        DisLike.clickDislike.apply(this);
        //получаем элемент
    }

    static toggleActive(arr){
        const index = arr.findIndex(function(el){
            return el.uniq === uniqID;
        });
        if(index !== -1){
            return "dislike-active";
        }{
            return "";
        }
    }

    static clickDislike(){
        this.$dislike.onclick = function(event){
            event.preventDefault;
            const btn = this;
            const base = getDataArray();
            for (let i = 0; i < base.length; i++) {
                const element = base[i];

                if(element.id == PopUp.getId()){
                    const indexDis = element.dislikes.findIndex(function(el){
                        return el.uniq === uniqID;
                    });
                    const indexLike = element.likes.findIndex(function(el){
                        return el.uniq === uniqID;
                    });

                    if(indexDis === -1 && !btn.classList.contains("dislike-active" )){
                        btn.classList.add("dislike-active");
                        btn.setAttribute("data-dis", "true");
                        element.dislikes.push({uniq: uniqID});
                        localStorage.setItem(element.id, JSON.stringify(element));

                        if(indexLike !== -1 && document.querySelector(".like").classList.contains("like-active")){
                            document.querySelector(".like").classList.remove("like-active");
                            btn.setAttribute("data-like", "false");
                            element.likes.splice(indexDis, 1);
                            localStorage.setItem(element.id, JSON.stringify(element));
                        }

                    } else {
                        btn.classList.remove("dislike-active");
                        btn.setAttribute("data-dis", "false");
                        element.dislikes.splice(indexDis, 1);
                        localStorage.setItem(element.id, JSON.stringify(element));
                    }
                } 
               
            }
        };
    }
}

new DisLike();
// +++++++++++++++++++++++++++++++++++++++++++++++

class Comments {
    constructor(){
        this.$formBtn = document.querySelector("#message-btn");
    }
    static $name;
    static $message;
    static $msgWindow;

    static setCommElements(){
        Comments.$name = document.querySelector("#name");
        Comments.$message = document.querySelector("#message");
        Comments.$msgWindow = document.querySelector("#messages-list");
        this.$formBtn = document.querySelector("#message-btn");
        Comments.sendMsessage.apply(this);
    }

    
    static sendMsessage(){
        Comments.$message.onkeypress = (event) =>{
            if (event.keyCode == 13) {
                this.$formBtn.click();
            }
        };

        this.$formBtn.onclick = function (event) {
            event.preventDefault;
            const nameVal = Comments.$name.value;
            const msgVal = Comments.$message.value;
            const dateVal = new Date();
            if (nameVal.trim() !=="" && msgVal.trim()!=="") {
                const base = getDataArray();
                for (let i = 0; i < base.length; i++) {
                    const element = base[i];
                    if(element.id == PopUp.getId()){
                        
                        new Promise(()=>{
                            element.comments.push({uniq:uniqID, name:nameVal, date:dateVal, message:msgVal});
                        }).then(localStorage.setItem(element.id, JSON.stringify(element)))
                            .then(Comments.createComment(),
                                Comments.$name.value = "",
                                Comments.$message.value = "",
                              
                                document.querySelector(".comments__window").scrollTop = document.querySelector(".comments__window").scrollHeight);
                        
                    }
                }
            }
        };
    }

    static createComment(){
        const base = getDataArray();
        for (let i = 0; i < base.length; i++) {
            const element = base[i];
            const elComments = element.comments;
            if(element.id == PopUp.getId()){
                //remove coments
                while (Comments.$msgWindow.firstChild) {
                    Comments.$msgWindow.firstChild.remove();
                }

                for (let j = 0; j < elComments.length; j++) {

                    const dateMessage = new Date(elComments[j].date);
                    const dataMsg = Date.parse(elComments[j].date);
                    const x = Date.now() - dateMessage;
                    const hours = Math.floor((x/(1000*60*60)));
                    
                    //add comments
                    Comments.$msgWindow.insertAdjacentHTML("beforeend", 
                        `<li class="comment" data-time = ${dataMsg}>
                            <address class="comment__user">by ${elComments[j].name}</address>
                            <time class="comment__date" datetime="${elComments[j].date}">${Time.howOld(hours)} ${Time.pmam(dateMessage)}</time>
                            <p class="comment__msg"></p>
                        </li>`
                    );
                    document.querySelector(`li[data-time = "${dataMsg}"] > p`).textContent = elComments[j].message;
                   
                }
            }
        }
    }
   
}
new Comments();

class Time {

    static pmam (time){
        return time.toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: true });
    }

    static howOld(z){
        const d = 24;
        switch (true) {
        case z < d:
            return z = "Today";
            
        case d > z < d*2:
            return z = "Yesterday";
           
        case d*2 > z < d*3:
            return z = "2 Days ago";

        case d*3 > z < d*4:
            return z = "3 Days ago";

        case d*4 > z < d*5:
            return z = "4 Days ago";

        case d*5 > z < d*6:
            return z = "5 Days ago";

        case d*6 > z < d*7:
            return z = "6 Days ago";

        case d*7 > z < d*8:
            return z = "Week ago";

            //...other
        default:
            break;
        }
    }
}
new Time();

